{
  "_args": [
    [
      {
        "hosted": {
          "directUrl": "https://raw.githubusercontent.com/aretecode/noflo-tester/experimental/package.json",
          "gitUrl": "git://github.com/aretecode/noflo-tester.git#experimental",
          "httpsUrl": "git+https://github.com/aretecode/noflo-tester.git#experimental",
          "shortcut": "github:aretecode/noflo-tester#experimental",
          "ssh": "git@github.com:aretecode/noflo-tester.git#experimental",
          "sshUrl": "git+ssh://git@github.com/aretecode/noflo-tester.git#experimental",
          "type": "github"
        },
        "name": "noflo-tester",
        "raw": "noflo-tester@git+https://github.com/aretecode/noflo-tester.git#experimental",
        "rawSpec": "git+https://github.com/aretecode/noflo-tester.git#experimental",
        "scope": null,
        "spec": "git+https://github.com/aretecode/noflo-tester.git#experimental",
        "type": "hosted"
      },
      "/Users/james/code/yesflo/noflo-paypal"
    ]
  ],
  "_from": "git+https://github.com/aretecode/noflo-tester.git#experimental",
  "_id": "noflo-tester@0.0.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/noflo-tester",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/aretecode/noflo-tester/experimental/package.json",
      "gitUrl": "git://github.com/aretecode/noflo-tester.git#experimental",
      "httpsUrl": "git+https://github.com/aretecode/noflo-tester.git#experimental",
      "shortcut": "github:aretecode/noflo-tester#experimental",
      "ssh": "git@github.com:aretecode/noflo-tester.git#experimental",
      "sshUrl": "git+ssh://git@github.com/aretecode/noflo-tester.git#experimental",
      "type": "github"
    },
    "name": "noflo-tester",
    "raw": "noflo-tester@git+https://github.com/aretecode/noflo-tester.git#experimental",
    "rawSpec": "git+https://github.com/aretecode/noflo-tester.git#experimental",
    "scope": null,
    "spec": "git+https://github.com/aretecode/noflo-tester.git#experimental",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/aretecode/noflo-tester.git#47df1dd52ed3041d328bf4f6b609325070d3d9a6",
  "_shasum": "8a10a00d4b7019063d79a960177120ddc5e4c9d8",
  "_shrinkwrap": null,
  "_spec": "noflo-tester@git+https://github.com/aretecode/noflo-tester.git#experimental",
  "_where": "/Users/james/code/yesflo/noflo-paypal",
  "author": {
    "name": "Vladimir Sibirov"
  },
  "bugs": {
    "url": "https://github.com/trustmaster/noflo-tester/issues"
  },
  "dependencies": {
    "bluebird": "^2.3.11",
    "coffee-script": "1.10.0",
    "noflo": "git+https://github.com/aretecode/noflo-built.git#experiment",
    "noflo-nodejs": "^0.7.1",
    "noflo-runtime-base": "^0.7.3"
  },
  "description": "NoFlo component/graph testing wrapper compatible with BDD/TDD/whatever",
  "devDependencies": {
    "chai": "3.4.1",
    "coffeelint": "1.14.2",
    "mocha": "2.3.4"
  },
  "gitHead": "47df1dd52ed3041d328bf4f6b609325070d3d9a6",
  "homepage": "https://github.com/trustmaster/noflo-tester",
  "keywords": [
    "noflo",
    "testing"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "noflo-tester",
  "optionalDependencies": {},
  "readme": "NoFlo component/graph testing wrapper\n============\n\nTester wraps a component to provide a convenient interface compatible with any testing paradigm: TDD/BDD/whatever.\n\n## Benefits\n\n* Reduces boilerplate to set up a component testbed.\n* Provides common high-level methods.\n* Provides low-level access to the component, ports and events.\n* Compatible with different testing frameworks and complex test cases.\n\n## Getting started\n\nInstall `noflo-tester` and add it to your project's dev dependecies:\n\n```\nnpm install --save-dev noflo-tester\n```\n\nRequire it in your specs/tests:\n\n```coffeescript\nTester = require 'noflo-tester'\n```\n\nUse methods described below and run the tests just as you do it normally with your favorite testing framework.\n\n## API\n\nExplanations below contain examples in CoffeeScript using Mocha and Chai in BDD style. You can also write your tests in JavaScript, using any other framework or style.\n\n### Loading a component\n\nFirst you need to create a new Tester object to wrap your component or graph:\n\n```coffeescript\nt = new Tester 'my-noflo-app/Multiplier'\n```\n\nThe constructor accepts either a full component name (including namespace prefix), or an already instantiated component object, or a function returning such an object.\n\nIn general, components are loaded and wired up asynchronously, so you need to start the tester like this before running any tests:\n\n```coffeescript\nbefore (done) ->\n  t.start (err, instance) ->\n    return done err if err # Error handling, optional\n    # instance contains a ready to use component\n    done()\n```\n\n**Advanced options**\n\nIf the component to be tested is a NoFlo graph, you can pass custom event handlers to the Tester constructor:\n\n```coffeescript\nt = new Tester 'my-noflo-app/Multiplier',\n  load: (err, instance) ->\n    # This is call after loading the graph\n  ready: (err, instance) ->\n    # This is called when the network is ready to be attached\n```\n\n### Sending inputs and expecting output\n\nA high-level `receive` method listens on output ports for data and groups until a `disconnect` event.\n\nA high-level `send` methods sends data followed by a disconnect to one or more input ports.\n\nHere is an example that tests a simple multiplier component:\n\n```coffeescript\nt.receive 'xy', (data) ->\n  chai.expect(data).to.equal 30\n  done()\n\nt.send\n  x: 5\n  y: 6\n```\n\nNote that `receive` is called before `send`, because it binds event handlers asynchronously, while `send` is almost an instant operation.\n\nShort syntax for `send` method to send data and disconnect to just one inport looks like this:\n\n```coffeescript\nt.send 'x', 123\n```\n\n### Direct access to component, ports and events\n\nIn more complex test cases you might want to send IPs and handle particular events manually:\n\n```coffeescript\nt.outs.xy.on 'data', (data) ->\n  chai.expect(data).to.equal 24\n  done()\n\nt.ins.x.send 8\nt.ins.x.disconnect()\nt.ins.y.send 3\nt.ins.y.disconnect()\n```\n\nTester object provides `ins` and `outs` hashmaps of sockets attached to the component.\n\nYou can also access the component directly via `c` property:\n\n```coffeescript\nif t.c.outPorts.error.isAttached()\n  # Do something\n```\n\n### Receiving multiple data chunks and groups\n\nAs `receive` is triggered by a `disconnect` event, there might be multiple `data` packets in the transmission and also some `group` bracket IPs. In such case they are available as arrays and counts in the callback arguments:\n\n```coffeescript\nt.receive 'xy', (data, groups, dataCount, groupCount) ->\n  chai.expect(data).to.eql [4, 10, 18]\n  chai.expect(dataCount).to.equal 3\n  chai.expect(groups).to.eql ['foo', 'bar']\n  chai.expect(groupCount).to.equal 2\n  done()\n```\n\nNote that `groupCount` counts only closed groups via `endGroup` events, while `groups` contains unique groups sent to the output.\n\n### Receiving from multiple output ports\n\nIf a component sends output to multiple ports at the same time and you need to test results from all of them at once, that may require some syncrhonization spaghetti in your specs. But `receive` simplifies it by accepting a hashmap and returning a Promise that is resolved when results from all outputs in the map have been received:\n\n```coffeescript\ndiv = null\nmod = null\n\nt.receive\n  quotient: (data) ->\n    div = data\n  remainder: (data) ->\n    mod = data\n.then ->\n  chai.expect(div).to.equal 3\n  chai.expect(mod).to.equal 2\n  done()\n\nt.send\n  dividend: 11\n  divisor: 3\n```\n\n### Using promises to chain subsequent receives\n\nThe `receive` method returns a Promise resolved when a transmission is received, so you can chain subsequent transmissions in a thenable way, e.g.:\n\n```coffeescript\nt.receive 'quotient', (data) ->\n  chai.expect(data).to.equal 5\n.then ->\n  t.receive 'quotient', (data) ->\n    chai.expect(data).to.equal 8\n    done()\n  t.send\n    dividend: 56\n    divisor: 7\nt.send\n  dividend: 30\n  divisor: 6\n```\n\n### Examples\n\nSee complete BDD-style examples in `spec` folder.\n\n## Development\n\nThe first thing to start developing this package is:\n\n```\nnpm install\n```\n\nThen run bundled Mocha specs:\n\n```\nnpm test\n```\n\nThen feel free to hack on the `lib` and `specs`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/trustmaster/noflo-tester.git"
  },
  "scripts": {
    "pretest": "coffeelint lib/*.coffee spec/*.coffee",
    "test": "mocha --compilers coffee:coffee-script/register --require coffee-script/register -R spec spec/*.coffee"
  },
  "version": "0.0.4"
}
